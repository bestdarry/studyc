#include <stdio.h>

/*
数值的表示
整数:char ,short,int ,long ,long long 
          1      2      4     4         8
有符号数,最高位表示符号位,0表示正数,1表示负数
char :1字节,只有256种不同的情况,有符号-128~127,无符号0~255 (需要记住)
         256
short:2字节,0~65535
int,long:4字节,

负数的表示:-12,以其绝对值取反,然后再+1
-13:0000 1101->1111 0011
-128:->1000 0000->0111 1111->1000 0000
-1:->0000 0001->1111 1111
整数默认int4字节
-1:00000000 00000000 00000000 0000 0001->11111111 11111111 11111111 11111111
-12:00000000 00000000 00000000 00001100->11111111 11111111 11111111 11110100
总结:
    1.数值转二进制:正数,直接凑二进制,负数则为其绝对值取反+1
	2.二进制转数值:首先看符号位,0为正数,1为负数.如果为正则二进制直接相加.如果为负则其绝对值为取反+1
	例如:0101 1010->+90
	        1111 0010->- 0000 1110->-14
			1110 1101->- 0001 0011->-19
			1111 1111->-0000 0001->-1
			0001 1010->+26
unsigned:无符号

浮点数:

*/


int main()
{
	float a = 12.5;
	//精度,范围
	float b = 123456789;
	printf("%f\n",b);
	//a<<=1;//error

	return 0;
}

/*
int main()
{
	char a = -1;//
	char b = 255;//1111 1111->-1
	unsigned char c = -1;//1111 1111->255
	unsigned char d = 255;
	int e = a;
	printf("%d\n",e);//-1
	e = b;
	printf("%d\n",e);//-1
	e = c;
	printf("%d\n",e);//255
	e = d;
	printf("%d\n",e);//255
	//printf("%x\n",-12);//0xf4->1111 0100
	//for(char i=0;i<=127;i++)//-128~127
	//{
	//	printf("%d\n",i);
	//}
	return 0;
}
*/